?norm
x1 <- cbind(1, 1:10)
x1
norm(x1)
norm(x1, "I")
norm(x1, "M")
x <− c(1:3)
for ( element in x) { print(element + 2) }
x<-c(1:3)
x
for (element in x) {}
for (element in x) {print(element+2)}
for (el in x) {print(el+2)}
for (i in x) {print(i+2)}
for (i in 1:length(x)) {print(i+2)}
x<-c(2:4)
for (i in 1:length(x)) {print(i+2)}
for (i in seq_along(x)) {print(i+2)}
seq_along(x)
while(i<=length(x)) { y [ i ] <− x [ i ] + 2
i <− i+1
}y
while(i<=length(x)) { y [ i ] <− x [ i ] + 2, i=i+1}
while(i<=length(x)) {y[i]<-x[i]+2}, i=i+1}
while(i<=length(x)) {y[i]<-x[i]+2};i=i+1}
y<-null
y<-NULL
while(i<=length(x)) {y[i]<-x[i]+2};i=i+1}
x
while(i<=length(x)) {y[i]<-x[i]+2;i=i+1}
y
while(i<=length(x)) {y[i]<-x[i]+2;i<-i+1}
y
length(x)
i
i=1
while(i<=length(x)) {y[i]<-x[i]+2;i<-i+1}
y
3+5
print 3+5
3+5
print (3+5)
a, b = 0, 1
a, b = 0, 1
a = 0; b = 1
a = 0; b = 1
while (b < 10)
print b
a = b, b = a+b
a = 0; b = 1
while (b < 10) {
print b
a = b; b = a+b }
a = 0; b = 1
while (b < 10) {
print b
a = b
b = a+b }
? while
?while
? while
a = 0
b = 1
while (b < 10) {
print b
}
while (b<10) {
print b
}
while (b<10) {
print (b)
}
a = 0
b = 1
while (b<10) {
print (b)
a=b
b=a+b
}
# Fibonacci series
a = 0
b = 1
while (b<10) {
print (b)
b=a+b
a=b
}
a = 0
b = 1
while (b<10) {
print (b)
a=b
b=b+a
}
a = 0
b = 1
while (b<10) {
print (b)
a=b
b=b+a
}
while (b<10) {
print (b)
c=a
a=b
b=b+c
}
a = 0
b = 1
while (b<10) {
print (b)
c=a
a=b
b=b+c
}
x = 42
if (x < 0) {
x=0
print ("Negative changed to zero")
} else if (x == 0) {
print ("Zero")
} else if (x == 1) {
print ’Single’
} else {
print ’More’
}
x = 42
if (x < 0) {
x=0
print ("Negative changed to zero")
} else if (x == 0) {
print ("Zero")
} else if (x == 1) {
print ("Single")
} else {
print ("More")
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (w)
print(length(w))
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (w, length(w))
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (list (w, length(w)))
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (list (w, nchar(w)))
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (w, nchar(w))
}
# Measure some strings:
words = c("cat", "window", "defenestrate")
for (w in words) {
print (list (w, nchar(w)))
}
words = c("cat", "window", "defenestrate")
for (w in words) {
print (w)
print (nchar(w))
}
install.packages("Rcpp")
library(Rccp)
extern"C"SEXPfibWrapper(SEXPxs){ int x = Rcpp::as<int>(xs);
int fib = fibonacci(x);
return (Rcpp::wrap(fib));
}
library(Rcpp)
extern"C"SEXPfibWrapper(SEXPxs){ int x = Rcpp::as<int>(xs);
int fib = fibonacci(x);
return (Rcpp::wrap(fib));
}
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2); 5}
